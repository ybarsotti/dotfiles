encryption = "gpg"

################################################
# Encryption
################################################

[gpg]
  args = [
    "--quiet",
  ]
  recipient = "..."
  suffix = ".asc"

################################################
# Data
################################################

{{- includeTemplate "cpu" . }}
{{- includeTemplate "github-codespaces" . }}

{{/* Machine-specific prompts (only during init) */}}
{{- $machinePurpose := "personal" }}
{{- $machineEmail := "yuribarsotti@gmail.com" }}
{{- $machineGitUser := "ybarsotti" }}

{{- if stdinIsATTY }}
{{-   $purposePrompt := promptStringOnce . "machine.purpose" "Machine purpose" "personal" }}
{{-   if eq $purposePrompt "work" }}
{{-     $machinePurpose = "work" }}
{{-     $machineEmail = promptStringOnce . "machine.email" "Work email" "yuri.mendes@company.com" }}
{{-     $machineGitUser = promptStringOnce . "machine.gitUser" "Work git username" "yuri.mendes" }}
{{-   end }}
{{- end }}

{{/* Machine type detection */}}
{{- $machineType := "desktop" }}
{{- $is_codespaces:= env "CODESPACES" | not | not -}}
{{- if eq .chezmoi.os "darwin" }}
{{-   if contains "MacBook" (output "/usr/sbin/system_profiler" "SPHardwareDataType") }}
{{-     $machineType = "laptop" }}
{{-   else }}
{{-     $machineType = "desktop" }}
{{-   end }}
{{- else if eq .chezmoi.os "linux" }}
{{-   if $is_codespaces }}
{{-     $machineType = "virtual" }}
{{-   else }}
{{-     $machineType = (output "hostnamectl" "--json=short" | mustFromJson).Chassis }}
{{-   end }}
{{- else if eq .chezmoi.os "windows" }}
{{-   $machineType = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }") | trim }}
{{- end }}

[data.machine]
  type = {{ $machineType | quote }}
  purpose = {{ $machinePurpose | quote }}
  email = {{ $machineEmail | quote }}
  gitUser = {{ $machineGitUser | quote }}

[data]
  email = "yuribarsotti@gmail.com"
  dopplerProjectJson = { command = "doppler", args = ["secrets", "download", "--no-file", "--format", "json"], format = "json" }

################################################
# Version Management
################################################

[git]
  autoAdd = true
  autoCommit = false

################################################
# Operation
################################################

# Format for data output, either `json` or `yaml`
format = "yaml"

[merge]
  command = "nvim"
  args = [
    "-d",
    "{{ "{{" }} .Destination {{ "}}" }}",
    "{{ "{{" }} .Source {{ "}}" }}",
    "{{ "{{" }} .Target {{ "}}" }}",
  ]

[update]
  # Update submodules recursively
  recurseSubmodules = true
