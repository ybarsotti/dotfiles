encryption = "gpg"

################################################
# Encryption
################################################

[gpg]
  args = [
    "--quiet",
  ]
  recipient = "..."
  suffix = ".asc"

################################################
# Data
################################################

{{- includeTemplate "cpu" . }}
{{- includeTemplate "machine-type" . }}
{{- includeTemplate "github-codespaces" . }}

{{/* Machine-specific prompts (only during init) */}}
{{- $machinePurpose := "personal" }}
{{- $machineEmail := "yuribarsotti@gmail.com" }}
{{- $machineGitUser := "ybarsotti" }}

{{- $hostname := .chezmoi.hostname | lower }}
{{- if or (contains "work" $hostname) (contains "corp" $hostname) (contains "company" $hostname) }}
{{-   $machinePurpose = "work" }}
{{-   $machineEmail = "yuri.mendes@company.com" }}
{{-   $machineGitUser = "yuri.mendes" }}
{{- else }}
{{-   if stdinIsATTY }}
{{-     $purposePrompt := promptStringOnce . "machine.purpose" "Machine purpose" "personal" }}
{{-     if eq $purposePrompt "work" }}
{{-       $machinePurpose = "work" }}
{{-       $machineEmail = promptStringOnce . "machine.email" "Work email" "yuri.mendes@company.com" }}
{{-       $machineGitUser = promptStringOnce . "machine.gitUser" "Work git username" "yuri.mendes" }}
{{-     end }}
{{-   end }}
{{- end }}

[data]
  email = "yuribarsotti@gmail.com"
  dopplerProjectJson = { command = "doppler", args = ["secrets", "download", "--no-file", "--format", "json"], format = "json" }
  machinePurpose = {{ $machinePurpose | quote }}
  machineEmail = {{ $machineEmail | quote }}
  machineGitUser = {{ $machineGitUser | quote }}

################################################
# Version Management
################################################

[git]
  autoAdd = true
  autoCommit = false

################################################
# Operation
################################################

# Format for data output, either `json` or `yaml`
format = "yaml"

[merge]
  command = "nvim"
  args = [
    "-d",
    "{{ "{{" }} .Destination {{ "}}" }}",
    "{{ "{{" }} .Source {{ "}}" }}",
    "{{ "{{" }} .Target {{ "}}" }}",
  ]

[update]
  # Update submodules recursively
  recurseSubmodules = true
