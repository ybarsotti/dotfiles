{{/* chezmoi:template:missing-key=zero */}}
{{- if eq .chezmoi.os "darwin" -}}
#!/bin/bash

# This script sets up GPG key for git signing and encryption

set -eufo pipefail

{{ template "homebrew_path_setup" . }}

# Check dependencies
if ! command -v gpg &>/dev/null; then
    echo "GPG not found. Attempting to install gnupg..."
    if command -v brew &>/dev/null; then
        brew install gnupg pinentry-mac
    else
        echo "❌ Neither gpg nor brew found. Cannot install GPG."
        echo "Please ensure Homebrew packages are installed first."
        exit 1
    fi
    
    # Verify gpg is now available
    if ! command -v gpg &>/dev/null; then
        echo "❌ Failed to install or find GPG."
        echo "Please install it manually: brew install gnupg pinentry-mac"
        exit 1
    fi
    echo "✅ GPG installed successfully."
else
    echo "✅ GPG is available."
fi

# Check if GitHub SSH was configured first
if [ ! -f ~/.config/chezmoi/github-ssh-configured ]; then
    echo "⚠️  GitHub SSH key must be configured first."
    echo "💡 Please run 'chezmoi apply' to complete SSH setup."
    exit 0
fi

echo "Setting up GPG key..."

# Machine-specific settings
MACHINE_PURPOSE="{{ .machine.purpose }}"
EMAIL="{{ .machine.email }}"
GIT_USER="{{ .machine.gitUser }}"

# GPG key settings
if [ "$MACHINE_PURPOSE" = "work" ]; then
    KEY_NAME="Yuri Mendes (Work)"
    KEY_COMMENT="Work GPG Key - $(hostname)"
else
    KEY_NAME="Yuri Barsotti"
    KEY_COMMENT="Personal GPG Key - $(hostname)"
fi

echo "🔐 Setting up GPG for: $MACHINE_PURPOSE machine"
echo "📧 Email: $EMAIL"
echo "👤 Name: $KEY_NAME"

# Check if GPG key already exists for this email
if gpg --list-secret-keys --keyid-format LONG | grep -q "$EMAIL"; then
    echo "✅ GPG key already exists for $EMAIL"
    
    # Get the key ID
    KEY_ID=$(gpg --list-secret-keys --keyid-format LONG "$EMAIL" | grep sec | head -1 | cut -d'/' -f2 | cut -d' ' -f1)
    echo "🔑 Using existing key ID: $KEY_ID"
else
    echo "🆕 Generating new GPG key..."
    
    # Prompt for passphrase
    echo "🔐 A passphrase is required to protect your GPG key."
    echo "⚠️  Choose a strong passphrase that you won't forget!"
    read -s -p "Enter passphrase for GPG key: " GPG_PASSPHRASE
    echo ""
    read -s -p "Confirm passphrase: " GPG_PASSPHRASE_CONFIRM
    echo ""
    
    if [ "$GPG_PASSPHRASE" != "$GPG_PASSPHRASE_CONFIRM" ]; then
        echo "❌ Passphrases do not match. Exiting."
        exit 1
    fi
    
    if [ -z "$GPG_PASSPHRASE" ]; then
        echo "❌ Empty passphrase not allowed. Exiting."
        exit 1
    fi
    
    # Create GPG key generation batch file
    cat > /tmp/gpg-gen-key.batch << EOF
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
Name-Real: $KEY_NAME
Name-Comment: $KEY_COMMENT
Name-Email: $EMAIL
Expire-Date: 2y
Passphrase: $GPG_PASSPHRASE
%commit
%echo GPG key generation complete
EOF

    # Generate the key
    gpg --batch --generate-key /tmp/gpg-gen-key.batch
    
    # Clean up batch file and clear passphrase from memory
    rm /tmp/gpg-gen-key.batch
    unset GPG_PASSPHRASE
    unset GPG_PASSPHRASE_CONFIRM
    
    # Get the new key ID
    KEY_ID=$(gpg --list-secret-keys --keyid-format LONG "$EMAIL" | grep sec | head -1 | cut -d'/' -f2 | cut -d' ' -f1)
    echo "🆕 Generated new key ID: $KEY_ID"
fi

# Configure Git to use this GPG key
echo "⚙️  Configuring Git to use GPG key..."
git config --global user.signingkey "$KEY_ID"
git config --global commit.gpgsign true
git config --global tag.gpgsign true
git config --global user.name "$KEY_NAME"
git config --global user.email "$EMAIL"

# Set GPG TTY for proper terminal interaction
if ! grep -q "GPG_TTY" ~/.zshrc 2>/dev/null; then
    echo 'export GPG_TTY=$(tty)' >> ~/.zshrc
    echo "📝 Added GPG_TTY to ~/.zshrc"
fi

# Configure GPG agent for better UX
GPG_AGENT_CONF="$HOME/.gnupg/gpg-agent.conf"
mkdir -p "$(dirname "$GPG_AGENT_CONF")"

if [ ! -f "$GPG_AGENT_CONF" ]; then
    # Detect correct pinentry path
    PINENTRY_PATH=""
    if [ -f "/opt/homebrew/bin/pinentry-mac" ]; then
        PINENTRY_PATH="/opt/homebrew/bin/pinentry-mac"
    elif [ -f "/usr/local/bin/pinentry-mac" ]; then
        PINENTRY_PATH="/usr/local/bin/pinentry-mac"
    elif command -v pinentry-mac &>/dev/null; then
        PINENTRY_PATH="$(command -v pinentry-mac)"
    fi
    
    cat > "$GPG_AGENT_CONF" << EOF
# Cache settings for better UX
# default-cache-ttl: How long (in seconds) to cache the passphrase after last use
# max-cache-ttl: Maximum time to cache passphrase regardless of use
default-cache-ttl 43200
max-cache-ttl 86400

# Allow loopback pinentry for scripted access
allow-loopback-pinentry

# macOS Keychain integration
${PINENTRY_PATH:+pinentry-program $PINENTRY_PATH}

# Enable SSH support (optional, for SSH keys in GPG)
# enable-ssh-support
EOF
    echo "📝 Created GPG agent configuration"
    [ -n "$PINENTRY_PATH" ] && echo "🔐 Using pinentry at: $PINENTRY_PATH"
else
    echo "✅ GPG agent configuration already exists"
fi

# Restart GPG agent
gpgconf --kill gpg-agent
gpgconf --launch gpg-agent

echo ""
echo "🎉 GPG setup complete!"
echo ""
echo "📋 Your public key (add this to GitHub/GitLab):"
echo "────────────────────────────────────────────────"
gpg --armor --export "$KEY_ID"
echo "────────────────────────────────────────────────"
echo ""
echo "📝 To add this key to GitHub:"
echo "   1. Go to https://github.com/settings/gpg/new"
echo "   2. Paste the public key above"
echo "   3. Click 'Add GPG key'"
echo ""
echo "🔍 Key information:"
echo "   Key ID: $KEY_ID"
echo "   Email: $EMAIL"
echo "   Purpose: $MACHINE_PURPOSE"
echo ""
echo "⚡ Passphrase caching is configured:"
echo "   • First time: Enter passphrase when prompted"
echo "   • Cached for: 12 hours after last use (43200 seconds)"
echo "   • Max cache: 24 hours regardless of use"
echo "   • Uses macOS keychain integration for secure storage"
echo ""
echo "💡 Pro tips:"
echo "   • Run 'gpg --sign' once to cache your passphrase"
echo "   • Use 'gpg-connect-agent reloadagent /bye' to restart agent"
echo "   • Use 'gpg-connect-agent \"keyinfo --list\" /bye' to see cached keys"
echo ""
{{ end -}}