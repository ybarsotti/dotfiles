# MLflow Tracking Server Docker Compose Example
# Usage: docker-compose -f mlflow.yml up -d
# Access MLflow UI: http://localhost:5000
# Track experiments: mlflow.set_tracking_uri("http://localhost:5000")

version: '3.8'

services:
  mlflow-db:
    image: postgres:16-alpine
    container_name: dev-mlflow-db
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    ports:
      - "5433:5432"
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mlflow-server:
    image: ghcr.io/mlflow/mlflow:v2.17.0
    container_name: dev-mlflow-server
    depends_on:
      mlflow-db:
        condition: service_healthy
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow@mlflow-db:5432/mlflow
      - MLFLOW_ARTIFACT_ROOT=/mlflow/artifacts
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@mlflow-db:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  mlflow_db_data:
    driver: local
  mlflow_artifacts:
    driver: local
